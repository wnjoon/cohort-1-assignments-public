/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MockERC20, MockERC20Interface } from "../MockERC20";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "name_",
        type: "string",
        internalType: "string",
      },
      {
        name: "symbol_",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "allowance",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "freeMintTo",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "freeMintToSender",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transfer",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "ERC20InsufficientAllowance",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "allowance",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "needed",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InsufficientBalance",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "needed",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InvalidApprover",
    inputs: [
      {
        name: "approver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InvalidReceiver",
    inputs: [
      {
        name: "receiver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InvalidSender",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC20InvalidSpender",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516114fa3803806114fa833981810160405281019061003291906101d2565b81818160039081610043919061046b565b508060049081610053919061046b565b505050505061053d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100c48261007b565b810181811067ffffffffffffffff821117156100e3576100e261008c565b5b80604052505050565b60006100f661005d565b905061010282826100bb565b919050565b600067ffffffffffffffff8211156101225761012161008c565b5b61012b8261007b565b9050602081019050919050565b60005b8381101561015657808201518184015260208101905061013b565b60008484015250505050565b600061017561017084610107565b6100ec565b90508281526020810184848401111561019157610190610076565b5b61019c848285610138565b509392505050565b600082601f8301126101b9576101b8610071565b5b81516101c9848260208601610162565b91505092915050565b600080604083850312156101e9576101e8610067565b5b600083015167ffffffffffffffff8111156102075761020661006c565b5b610213858286016101a4565b925050602083015167ffffffffffffffff8111156102345761023361006c565b5b610240858286016101a4565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061029c57607f821691505b6020821081036102af576102ae610255565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102da565b61032186836102da565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061036861036361035e84610339565b610343565b610339565b9050919050565b6000819050919050565b6103828361034d565b61039661038e8261036f565b8484546102e7565b825550505050565b600090565b6103ab61039e565b6103b6818484610379565b505050565b5b818110156103da576103cf6000826103a3565b6001810190506103bc565b5050565b601f82111561041f576103f0816102b5565b6103f9846102ca565b81016020851015610408578190505b61041c610414856102ca565b8301826103bb565b50505b505050565b600082821c905092915050565b600061044260001984600802610424565b1980831691505092915050565b600061045b8383610431565b9150826002028217905092915050565b6104748261024a565b67ffffffffffffffff81111561048d5761048c61008c565b5b6104978254610284565b6104a28282856103de565b600060209050601f8311600181146104d557600084156104c3578287015190505b6104cd858261044f565b865550610535565b601f1984166104e3866102b5565b60005b8281101561050b578489015182556001820191506020850194506020810190506104e6565b868310156105285784890151610524601f891682610431565b8355505b6001600288020188555050505b505050505050565b610fae8061054c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce5671461016657806370a082311461018457806395d89b41146101b4578063a9059cbb146101d2578063b2684ed514610202578063dd62ed3e1461021e576100a9565b806306fdde03146100ae578063095ea7b3146100cc5780630b1f5ef3146100fc57806318160ddd1461011857806323b872dd14610136575b600080fd5b6100b661024e565b6040516100c39190610b95565b60405180910390f35b6100e660048036038101906100e19190610c50565b6102e0565b6040516100f39190610cab565b60405180910390f35b61011660048036038101906101119190610cc6565b610303565b005b610120610311565b60405161012d9190610d15565b60405180910390f35b610150600480360381019061014b9190610d30565b61031b565b60405161015d9190610cab565b60405180910390f35b61016e61034a565b60405161017b9190610d9f565b60405180910390f35b61019e60048036038101906101999190610dba565b610353565b6040516101ab9190610d15565b60405180910390f35b6101bc61039b565b6040516101c99190610b95565b60405180910390f35b6101ec60048036038101906101e79190610c50565b61042d565b6040516101f99190610cab565b60405180910390f35b61021c60048036038101906102179190610de7565b610450565b005b61023860048036038101906102339190610e14565b61045d565b6040516102459190610d15565b60405180910390f35b60606003805461025d90610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461028990610e83565b80156102d65780601f106102ab576101008083540402835291602001916102d6565b820191906000526020600020905b8154815290600101906020018083116102b957829003601f168201915b5050505050905090565b6000806102eb6104e4565b90506102f88185856104ec565b600191505092915050565b61030d81836104fe565b5050565b6000600254905090565b6000806103266104e4565b9050610333858285610580565b61033e858585610615565b60019150509392505050565b60006012905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103aa90610e83565b80601f01602080910402602001604051908101604052809291908181526020018280546103d690610e83565b80156104235780601f106103f857610100808354040283529160200191610423565b820191906000526020600020905b81548152906001019060200180831161040657829003601f168201915b5050505050905090565b6000806104386104e4565b9050610445818585610615565b600191505092915050565b61045a33826104fe565b50565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6104f98383836001610709565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105705760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016105679190610ec3565b60405180910390fd5b61057c600083836108e0565b5050565b600061058c848461045d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561060f57818110156105ff578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016105f693929190610ede565b60405180910390fd5b61060e84848484036000610709565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106875760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161067e9190610ec3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106f95760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106f09190610ec3565b60405180910390fd5b6107048383836108e0565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361077b5760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016107729190610ec3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107ed5760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016107e49190610ec3565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156108da578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108d19190610d15565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109325780600260008282546109269190610f44565b92505081905550610a05565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109be578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016109b593929190610ede565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a4e5780600260008282540392505081905550610a9b565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610af89190610d15565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b3f578082015181840152602081019050610b24565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b6782610b05565b610b718185610b10565b9350610b81818560208601610b21565b610b8a81610b4b565b840191505092915050565b60006020820190508181036000830152610baf8184610b5c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610be782610bbc565b9050919050565b610bf781610bdc565b8114610c0257600080fd5b50565b600081359050610c1481610bee565b92915050565b6000819050919050565b610c2d81610c1a565b8114610c3857600080fd5b50565b600081359050610c4a81610c24565b92915050565b60008060408385031215610c6757610c66610bb7565b5b6000610c7585828601610c05565b9250506020610c8685828601610c3b565b9150509250929050565b60008115159050919050565b610ca581610c90565b82525050565b6000602082019050610cc06000830184610c9c565b92915050565b60008060408385031215610cdd57610cdc610bb7565b5b6000610ceb85828601610c3b565b9250506020610cfc85828601610c05565b9150509250929050565b610d0f81610c1a565b82525050565b6000602082019050610d2a6000830184610d06565b92915050565b600080600060608486031215610d4957610d48610bb7565b5b6000610d5786828701610c05565b9350506020610d6886828701610c05565b9250506040610d7986828701610c3b565b9150509250925092565b600060ff82169050919050565b610d9981610d83565b82525050565b6000602082019050610db46000830184610d90565b92915050565b600060208284031215610dd057610dcf610bb7565b5b6000610dde84828501610c05565b91505092915050565b600060208284031215610dfd57610dfc610bb7565b5b6000610e0b84828501610c3b565b91505092915050565b60008060408385031215610e2b57610e2a610bb7565b5b6000610e3985828601610c05565b9250506020610e4a85828601610c05565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e9b57607f821691505b602082108103610eae57610ead610e54565b5b50919050565b610ebd81610bdc565b82525050565b6000602082019050610ed86000830184610eb4565b92915050565b6000606082019050610ef36000830186610eb4565b610f006020830185610d06565b610f0d6040830184610d06565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f4f82610c1a565b9150610f5a83610c1a565b9250828201905080821115610f7257610f71610f15565b5b9291505056fea26469706673582212208e7ab0c4b165f1266b53bb1412cccf410943d53e1b02f44073803a426465b3ed64736f6c634300081e0033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override deploy(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
