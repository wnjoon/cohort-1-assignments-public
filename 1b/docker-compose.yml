version: "3.8"

services:
  caddy:
    image: caddy:2.7-alpine
    container_name: caddy
    ports:
      - "8080:80"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - geth
    networks:
      - geth-network
  geth:
    image: ethereum/client-go:v1.15.0
    container_name: geth
    ports:
      - "8545:8545"  # HTTP RPC
      - "8546:8546"  # WebSocket RPC
      - "30303:30303"  # P2P
      - "30303:30303/udp"  # P2P UDP
    volumes:
      - geth-data:/root/.ethereum
      - ./geth:/geth
    command: >
      --dev
      --datadir /root/.ethereum
      --http
      --http.addr 0.0.0.0
      --http.port 8545
      --http.corsdomain "*"
      --http.vhosts "*"
      --http.api "eth,net,web3,personal,miner,admin,debug"
      --ws
      --ws.addr 0.0.0.0
      --ws.port 8546
      --ws.api "eth,net,web3,personal,miner,admin,debug"
      --ws.origins "*"
      --allow-insecure-unlock
      --mine
      --networkid 1337
      --nodiscover
      --verbosity 3
      --miner.gaslimit 8000000
    restart: unless-stopped
    networks:
      - geth-network
  geth-init:
    image: ethereum/client-go:v1.15.0
    container_name: geth-init
    volumes:
      - ./geth-init:/scripts
      - geth-data:/root/.ethereum
      - ./geth-init:/shared
    entrypoint: ["/bin/sh", "/scripts/entrypoint.sh"]
    depends_on:
      - geth
    networks:
      - geth-network
  sc-deployer:
    # image: ghcr.io/foundry-rs/foundry:latest
    image: foundry-jq:latest
    platform: linux/arm64
    container_name: sc-deployer
    user: root
    volumes:
      - ./sc-deployer:/workspace
      - ./geth-init:/shared
    working_dir: /workspace
    entrypoint: ["/bin/sh", "/workspace/entrypoint.sh"]
    depends_on:
      - geth
    networks:
      - geth-network 
  sc-deployment-server:
    image: caddy:2.7-alpine
    container_name: sc-deployment-server
    ports:
      - "8081:80"
    volumes:
      - ./sc-deployment-server/Caddyfile:/etc/caddy/Caddyfile
      # serve deployment.json
      - ./sc-deployer:/usr/share/caddy
    depends_on:
      - sc-deployer
    networks:
      - geth-network
  ngrok:
    image: ngrok/ngrok:latest
    container_name: ngrok
    ports:
      - "4040:4040" # ngrok 웹 대시보드 접근용 (선택 사항)
    environment:
      # .env 파일에서 인증 토큰을 읽어옵니다.
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command:
      # Caddy 컨테이너의 80번 포트를 지정한 도메인으로 터널링합니다.
      - "http"
      - "--domain=${NGROK_DOMAIN}"
      - "caddy:80" # cast balance 0x404fa3f0Acf620e3d2A3c6aa80E27b07C830EB5a -r https://adapting-haddock-yearly.ngrok-free.app
    depends_on:
      - caddy # Caddy가 먼저 실행된 후에 ngrok이 실행되도록 합니다.
    networks:
      - geth-network # Caddy와 같은 네트워크에 있어야 합니다.
volumes:
  geth-data:

networks:
  geth-network:
    driver: bridge